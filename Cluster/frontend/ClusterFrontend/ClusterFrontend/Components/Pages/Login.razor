@page "/login"
@using ClusterFrontend.DTOs
@using ClusterFrontend.Services
@using ClusterFrontend.Interface

<EditForm Model="@LoginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="useremail">Email</label>
        <InputText id="useremail" @bind-Value="LoginModel.UserEmail" />
        <ValidationMessage For="@(() => LoginModel.UserEmail)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="LoginModel.Password" type="password" />
        <ValidationMessage For="@(() => LoginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>    

    <div class="mt-2">
        Don't have an account? <a href="/register">Register here</a>
    </div>
</EditForm>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger mt-4">@ErrorMessage</div>
}

@code {
    private UserLoginRequest LoginModel { get; set; } = new();
    private string? ErrorMessage { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private IAuthService AuthService { get; set; } = null!;

    private async Task HandleLogin()
    {
        try
        {
            var userInfo = await AuthService.Login(LoginModel);

            if (userInfo != null)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }
}