@page "/runners"
@using ClusterFrontend.Interface
@using ClusterFrontend.Objects
@inject IRunnerService RunnerService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer


<h3>Runners</h3>

<div class="container">
    <div class="column left">
        <h3>Runners</h3>
        @if (TaskRunners.Count == 0)
        {
            <p>No runners registered yet.</p>
        }
        else
        {
            <ul>
                @foreach (var runner in TaskRunners)
                {
                    <li>
                        <span>@runner.Name (Last connected: @runner.LastConnected)</span>
                        <button @onclick="() => DeleteRunner(runner.Id)">🗑️</button>
                    </li>
                }
            </ul>
        }
    </div>
    <div class="column right">
        @if (!string.IsNullOrEmpty(requestError))
        {
            <p style="color:red">@requestError</p>
        }
        @if (!string.IsNullOrEmpty(registrationSecret))
        {
            <p style="color:green">
                Runner Registerd! Copy this secret: <strong>@registrationSecret</strong>
            </p>
            <sub>This secret is only onetime viewable for security reasons.</sub>
        }
        <EditForm Model="@runnerRequest" OnValidSubmit="@HandleRegisterRunner" FormName="Register">
            <div>
                <h3 style="font-weight:bold; color:purple">Request New Runner</h3>
            </div>
            <br />
            <div class="col-12 row">
                <input class="form-control col-12" @bind="runnerRequest.Name" placeholder="Name" />
            </div>
            <br />
            <br />
            <div class="col-12 row">
                <input type="submit" class="form-control col-6 btn btn-primary" value="Request Secret" />
            </div>
        </EditForm>
    </div>
</div>

@code {
    private RequestRunner runnerRequest = new();
    private List<TaskRunner> TaskRunners = new();
    private string? requestError;
    private string? registrationSecret;

    protected override async Task OnInitializedAsync()
    {
        await LoadRunners();
    }

    private async Task LoadRunners()
    {
        try
        {
            TaskRunners = await RunnerService.GetRunners();
        }
        catch (Exception ex)
        {
            requestError = $"Failed to load runners: {ex.Message}";
        }
    }

    private async Task HandleRegisterRunner()
    {
        registrationSecret = null;
        requestError = null;

        try
        {
            var newRunner = await RunnerService.RequestNewRunner(runnerRequest);

            if (newRunner != null)
            {
                TaskRunners.Add(newRunner);
                registrationSecret = newRunner.Secret; // Display raw secret
                runnerRequest = new(); // Reset form
            }
            else
            {
                requestError = "Runner registration failed.";
            }
        }
        catch (Exception ex)
        {
            requestError = $"Error registering runner: {ex.Message}";
        }
    }

    private async Task DeleteRunner(Guid runnerId)
    {
        // You can later implement an API call here
        TaskRunners.RemoveAll(r => r.Id == runnerId);
    }
}

<style>
    .container {
        display: flex;
        gap: 20px;
    }

    .column {
        flex: 1;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .left {
        background-color: #e7f0ff;
    }

    .right {
        background-color: #ffe7e7;
    }
</style>