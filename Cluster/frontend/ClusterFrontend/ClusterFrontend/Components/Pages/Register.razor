@page "/register"
@inject IAuthService AuthService
@using ClusterFrontend.DTOs

<EditForm Model="@RegisterModel" OnValidSubmit="@HandleRegistration" FormName="registerForm">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="RegisterModel.Username" />
        <ValidationMessage For="@(() => RegisterModel.Username)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="RegisterModel.UserEmail" />
        <ValidationMessage For="@(() => RegisterModel.UserEmail)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="RegisterModel.Password" type="password" />
        <ValidationMessage For="@(() => RegisterModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger mt-4">@ErrorMessage</div>
}

@code {
    private UserRegisterRequest RegisterModel { get; set; } = new();
    private string? ErrorMessage { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private async Task HandleRegistration()
    {
        try
        {
            var success = await AuthService.Register(RegisterModel);

            if (success)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                ErrorMessage = $"Registration failed. {success}.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }
}